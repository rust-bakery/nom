name: CI

on: [push, pull_request]

env:
  RUST_MINVERSION: 1.41.1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - 1.44.0

        features:
          - ''

        include:
          - rust: stable
            features: ''
          - rust: stable
            features: '--features "std lexical"'
          - rust: stable
            features: '--no-default-features'
          - rust: stable
            features: '--no-default-features --features "alloc"'
          - rust: nightly
            features: ''
          - rust: nightly
            features: '--no-default-features'
          - rust: nightly
            features: '--no-default-features --features "alloc"'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust (${{ matrix.rust }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose ${{ matrix.features }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose ${{ matrix.features }}

  minrust:
    name: Test MSRV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust (${{ env.RUST_MINVERSION }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_MINVERSION }}
          profile: minimal
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --no-default-features --features "lexical"

  bench:
    name: Bench
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Compile bench
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: --verbose --no-run --features ""

      - name: Run bench
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: --verbose --features ""

  doc:
    name: Build documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --verbose --features "std lexical docsrs"

  fmt:
    name: Check formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          profile: minimal
          override: true

      - name: cargo fmt -- --check
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  coverage:
    name: Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-tarpaulin --version 0.18.0-alpha3 # @TODO restore to normal (https://github.com/xd009642/tarpaulin/issues/756#issuecomment-838769320)

      - name: Run cargo tarpaulin
        uses: actions-rs/cargo@v1
        env:
          TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        with:
          command: tarpaulin
          args: --coveralls "$TOKEN" --avoid-cfg-tarpaulin # @TODO restore to normal (https://github.com/xd009642/tarpaulin/issues/756#issuecomment-838769320)
